/* tslint:disable */
/* eslint-disable */
/**
 * chicken-data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EggEventInput,
  EggEventOutput,
} from '../models';
import {
    EggEventInputFromJSON,
    EggEventInputToJSON,
    EggEventOutputFromJSON,
    EggEventOutputToJSON,
} from '../models';

export interface CreateEggEventRequest {
    eggEventInput?: EggEventInput;
}

export interface DeleteEggEventRequest {
    id: number;
}

export interface GetEggEventByIdRequest {
    id: number;
}

export interface GetEggEventsRequest {
    from: Date;
    to: Date;
}

export interface PutEggEventRequest {
    id: number;
    eggEventInput?: EggEventInput;
}

/**
 * 
 */
export class EggEventControllerApi extends runtime.BaseAPI {

    /**
     */
    async createEggEventRaw(requestParameters: CreateEggEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EggEventOutput>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/egg-events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EggEventInputToJSON(requestParameters.eggEventInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EggEventOutputFromJSON(jsonValue));
    }

    /**
     */
    async createEggEvent(requestParameters: CreateEggEventRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EggEventOutput> {
        const response = await this.createEggEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteEggEventRaw(requestParameters: DeleteEggEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEggEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/egg-events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteEggEvent(requestParameters: DeleteEggEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteEggEventRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getEggEventByIdRaw(requestParameters: GetEggEventByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEggEventById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/egg-events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getEggEventById(requestParameters: GetEggEventByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getEggEventByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getEggEventsRaw(requestParameters: GetEggEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<EggEventOutput>>> {
        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getEggEvents.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getEggEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString().substr(0,10);
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/egg-events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EggEventOutputFromJSON));
    }

    /**
     */
    async getEggEvents(requestParameters: GetEggEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<EggEventOutput>> {
        const response = await this.getEggEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putEggEventRaw(requestParameters: PutEggEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putEggEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/egg-events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EggEventInputToJSON(requestParameters.eggEventInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putEggEvent(requestParameters: PutEggEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putEggEventRaw(requestParameters, initOverrides);
    }

}
