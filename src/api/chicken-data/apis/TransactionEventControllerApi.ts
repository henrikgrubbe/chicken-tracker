/* tslint:disable */
/* eslint-disable */
/**
 * chicken-data API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TransactionEventInput,
  TransactionEventOutput,
} from '../models';
import {
    TransactionEventInputFromJSON,
    TransactionEventInputToJSON,
    TransactionEventOutputFromJSON,
    TransactionEventOutputToJSON,
} from '../models';

export interface CreateTransactionEventRequest {
    transactionEventInput?: TransactionEventInput;
}

export interface DeleteTransactionEventRequest {
    id: number;
}

export interface GetTransactionEventByIdRequest {
    id: number;
}

export interface GetTransactionEventsRequest {
    from: Date;
    to: Date;
}

export interface PutTransactionEventRequest {
    id: number;
    transactionEventInput?: TransactionEventInput;
}

/**
 * 
 */
export class TransactionEventControllerApi extends runtime.BaseAPI {

    /**
     */
    async createTransactionEventRaw(requestParameters: CreateTransactionEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionEventOutput>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction-events`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionEventInputToJSON(requestParameters.transactionEventInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionEventOutputFromJSON(jsonValue));
    }

    /**
     */
    async createTransactionEvent(requestParameters: CreateTransactionEventRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionEventOutput> {
        const response = await this.createTransactionEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTransactionEventRaw(requestParameters: DeleteTransactionEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTransactionEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transaction-events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTransactionEvent(requestParameters: DeleteTransactionEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTransactionEventRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getTransactionEventByIdRaw(requestParameters: GetTransactionEventByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTransactionEventById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transaction-events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async getTransactionEventById(requestParameters: GetTransactionEventByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getTransactionEventByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getTransactionEventsRaw(requestParameters: GetTransactionEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TransactionEventOutput>>> {
        if (requestParameters.from === null || requestParameters.from === undefined) {
            throw new runtime.RequiredError('from','Required parameter requestParameters.from was null or undefined when calling getTransactionEvents.');
        }

        if (requestParameters.to === null || requestParameters.to === undefined) {
            throw new runtime.RequiredError('to','Required parameter requestParameters.to was null or undefined when calling getTransactionEvents.');
        }

        const queryParameters: any = {};

        if (requestParameters.from !== undefined) {
            queryParameters['from'] = (requestParameters.from as any).toISOString().substr(0,10);
        }

        if (requestParameters.to !== undefined) {
            queryParameters['to'] = (requestParameters.to as any).toISOString().substr(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transaction-events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TransactionEventOutputFromJSON));
    }

    /**
     */
    async getTransactionEvents(requestParameters: GetTransactionEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TransactionEventOutput>> {
        const response = await this.getTransactionEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putTransactionEventRaw(requestParameters: PutTransactionEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling putTransactionEvent.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction-events/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionEventInputToJSON(requestParameters.transactionEventInput),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putTransactionEvent(requestParameters: PutTransactionEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.putTransactionEventRaw(requestParameters, initOverrides);
    }

}
